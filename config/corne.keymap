/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

&mmv {
   time-to-max-speed-ms = <680>;
   acceleration-exponent=<2>;
};

/ {
    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        meh: layer_tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&to>;
        };
    };


        keymap {
                compatible = "zmk,keymap";
                default_layer {
//      --------------------------------------------------------------------------------------------------------------------------------------------------
//      |  Q / ESC     |  W          |  E          |  R            |  T    |        |  Y        |  U            |  I             |  O          |  P             |
//      |  A           |  S          |  D          |  F            |  G    |        |  H        |  J            |  K             |  L          |  ;             |
//      |  Z           |  X          |  C          |  V            |  B    |        |  N        |  M            |  , / '         |  .          |  /             |
//                                   |  BKSP       |  LAYER 0      |  TAB  |        |  SPC      |  LAYER +1     |  ENT           |

                        bindings = <
&kp A     &td ESC Q      &kp W         &kp E         &kp R           &kp T            &kp Y       &kp U           &kp I            &kp O         &kp P                  &kp A
&kp A     &bhm LCTRL A   &bhm LGUI S   &bhm LALT D   &bhm LSHIFT F   &kp G            &kp H       &bhm LSHIFT J   &bhm LALT K      &bhm LGUI L   &bhm LCTRL SEMI        &kp A
&kp A     &kp Z          &kp X         &kp C         &kp V           &kp B            &kp N       &kp M           &td APOS COMMA   &kp DOT       &kp FSLH               &kp A
                                       &kp BSPC      &meh 1 0          &kp TAB          &kp SPACE   &to 2           &kp RET
                        >;
                };
                number_layer {
//      --------------------------------------------------------------------------------------------------------------------------------------------------
//      |  Q / ESQ     |  W          |  E          |  R            |  T    |        |  *              |  7        |  8        |  9        |  - / _                |
//      |  A           |  S          |  D          |  F            |  G    |        |  .              |  4        |  5        |  6        |  +                    |
//      |  Z           |  X          |  C          |  V            |  B    |        |  0              |  1        |  2        |  3        |  /                    |
//                                   |  BKSP       |  LAYER 0      |  TAB  |        |  SPC            |  LAYER +1 |  ENT      |

                        bindings = <
&trans    &trans         &trans        &trans        &trans          &trans            &kp STAR          &kp N7      &kp N8      &kp N9      &td UNDERSCORE MINUS   &trans
&trans    &trans         &trans        &trans        &trans          &trans            &kp DOT           &kp N4      &kp N5      &kp N6      &kp PLUS               &trans
&trans    &trans         &trans        &trans        &trans          &trans            &kp N0            &kp N1      &kp N2      &kp N3      &kp SLASH              &trans
                                       &trans        &trans          &trans            &trans            &to 2       &trans
                        >;
                };
                movement_layer {
//      --------------------------------------------------------------------------------------------------------------------------------------------------
//      |  Q / ESQ     |  W          |  E          |  R            |  T    |        |  HOME           |  7        |  8        |  END      |  page up       |
//      |  A           |  S          |  D          |  F            |  G    |        |  left           |  down     |  up       |  right    |  page down     |
//      |  Z           |  X          |  C          |  V            |  B    |        |  0              |  1        |  2        |  3        |  /             |
//                                   |  BKSP       |  LAYER 0      |  TAB  |        |  SPC            |  LAYER +1 |  ENT      |

                        bindings = <
&trans    &trans         &trans        &trans        &trans          &trans           &kp HOME          &kp KP_N7   &kp KP_N8   &kp END     &kp PAGE_UP               &trans
&trans    &trans         &trans        &trans        &trans          &trans           &kp LEFT          &kp DOWN    &kp UP      &kp RIGHT   &kp PAGE_DOWN             &trans
&trans    &trans         &trans        &trans        &trans          &trans           &kp KP_N0         &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp KP_SLASH              &trans
                                       &trans        &trans          &trans           &trans            &to 3       &trans
                        >;
                };
                game_layer {
//      --------------------------------------------------------------------------------------------------------------------------------------------------
//      |  TAB          |  Q    |  W      |  E          |  R               |        |          |        |        |
//      |  LSHIFT       |  A    |  S      |  D          |  F               |        |          |        |        |
//      |  LCTRL        |  Z    |  X      |  C          |  V               |        |          |        |        |
//                              |  BKSP   |  LAYER 0    |  SPC             |        |          |        |        |

                        bindings = <
&trans    &kp TAB         &kp Q    &kp W     &kp E         &kp R                        &trans   &trans   &trans   &trans   &trans   &trans
&trans    &kp LSHIFT      &kp A    &kp S     &kp D         &kp F                        &trans   &trans   &trans   &trans   &trans   &trans
&trans    &kp LCTRL       &kp Z    &kp X     &kp C         &kp V                        &trans   &trans   &trans   &trans   &trans   &trans
                                   &trans    &trans        &kp SPACE                    &trans   &to 4   &trans
                        >;
                };
                tri_layer {
		bindings = <
&trans    &kp TAB         &mwh SCROLL_LEFT    &mmv MOVE_UP    &mwh SCROLL_RIGHT         &kp R                     &trans   &trans   &trans   &trans   &trans   &trans
&trans    &kp LSHIFT      &mmv MOVE_LEFT      &mmv MOVE_DOWN  &mmv MOVE_RIGHT           &kp F                     &trans   &trans   &trans   &trans   &trans   &trans
&trans    &kp LCTRL       &mkp RCLK           &mwh SCROLL_UP  &mwh SCROLL_DOWN          &mkp LCLK                 &trans   &trans   &trans   &trans   &trans   &trans
                                              &trans          &trans                    &kp SPACE                 &trans   &to 5   &trans
		>;
		};
                bluetooth_layer{
                        bindings = <
&trans    &trans         &out OUT_USB  &out OUT_BLE  &out OUT_TOG    &trans             &bt BT_SEL 0      &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &trans
&trans    &trans         &trans        &trans        &trans          &trans             &bt BT_CLR        &trans         &trans         &trans         &trans           &trans
                                       &trans        &trans          &trans             &trans            &none          &trans
                        >;
                };

        };
};
